Dragrace
============
x get something on the frontend up that can pull the season down for it
x start putting things on redis
x create fill_in_current route function for one route
x call that route with the downloaded thing

x create new queen
x list all queens
x delete queen:: Ugh, apparently ":" in html id's mess up jquery // gotta escape them
x have  view update on del/add
x README

x edit the list of possible plays
x create new episode

x add events to episodes
    x QUEEN did WHAT?
x Players
x after submitting a new play, scroll to the bottom so the UI is in view
x godeps
x Heroku
    x need a proc file
    x need to handle dev/prod correctly   
        * gonna get env variables, use that to write the config file for static?
            * drop the config file, should just be using realative paths
        x got to do redis right, should I have a global conn instead of per-call?
        x provision redis
        x use a one-off to configure the season
        x PUSH
x calculate scores
    x queens
    x players

* Refactor Frontend
    * refactor to have a build system and be broken into smaller parts
    * refactor adding actions so it's not as complex
        * refactor adding delete buttons
        * very repeaty in js.
    * refactor js views into separate files
        * things that don't depend on one another should be easy to split.

* show the most recent episode delta in the player/queen views
* show which queens each team has in the edit players page
* show which queens each player has in the main page
* create the view-episode link
* queens shoul show everything they've done in previous episodes under them.
* Put the plays and queens in order at least.
* link to all the pages from everything
* remove the debug button from prod

* prod is slow loading

* get rid of the default text in everything
* in edit-episode, make the history have alternating hilighted rows
* solve the bin-packing problem
* create nav between different parts of main pages. 
* create the UI
* why did I have to refresh the page 6 times to get the new js?

* refactor the redis stuff so that we arent repeating ourselves
    * still repeaty in get season

* queens need images, at least. Players (teams?) too.
* move ids to be urls, until then we use redis keys for everything. 
* embed the data in the first pull down so you don't have to hit the server 2x. 
* gofmt

* theres slop in racetrack.js around the global TheSeason and trying to pass it around
    * just need to take it out of the PostWhatever methods
* nice 404 page? rendered in the single page, probably...
* set up a season the first time you get going. 
* we know how many episodes there will be, (and when they air?) we could just show the next one? or something?


BUGS
----
* if you delete a queen we don't clean up the references to her in Players, Plays, ...


Questions:
----------
* Should I be starting the redis connnection on each request or have a global?
* What's the standard way to get the front end to do the right thing?
    * duh, don't hard code the hotsname, just do relative paths...

UI
==

VIEW:
-----
Three tabs:
* plebs  "/"
* queens  "/queens"
* episodes "/episodes"


EDIT:
-----
* add new episode
    * add/remove scoreing from episode
...
* add new queen
* add new pleb
* add new play_type


BACKEND
=======
* get everything at once?

API
===
# right now i'm using the key for the ID which actually seems pretty wrong. Should be using ID. But I wish that I had URLs for ids for everything, would save client time for sure. maybe I should just do this. 
/seasons/:id
/seasons/:id/plebs/:id
/seasons/:id/queens/:id
/seasons/:id/queens/:id/scores/:id
/seasons/:id/episodes/:id
/seasons/:id/episodes/:id/scores/:id

/current_season/

plebs and queens actually span seasons, so maybe drop that prefix, just have them all hang
but maybe make an api that pulls down everything for a season since that should be everything. 
    * if they are independent of seasons, the plebs still have the season specific "which are my queens" thing
    * maybe this is premature optimization. There's still season specific stuff about all of them. 


DATABASE
========



TESTS I SHOULD HAVE CREATED
===========================
* post queen: starting in javascript, against a test server, verify that thing is create serverside, that 201 is returned. 
    * needs to be able to run with build && run serer && test
    * needs to reset database stuff in between, or start fresh
* I kindof like the idea of testing the api consumer and the api together, then you just aren't testing the UI
* The router is very testable, make sure that urls trigger the right function calls

* In one test, should be able to:
    * seed database
    * run server?
    * run my javascript code, make ajax request
    * check database
    * check returns 
    * inspect request body
    * inspect response body
    * clear database

* I made 2 mistakes where I copy pasta'd the wrong thing in the wrong place.

==================================================
==================================================

IN GENERAL
==========
* auto build/run server on save
* something to hit the api server with
* switch to a customized vim?
* build API niceities so that the backend is easy
* have some sort of wholistic client/server dev story

* should be creating tests all the time
    * The easier it is to create a broad test the better

* I want to be able to see the body of every request, and the text of every db query

THINGS I MISS FROM TESTBOT
* URLS everywhere
* auto errors
* API infrastructure was so good. 


EDITOR
------
* auto add ";" to end of line and create new line. 
* Pasting in code should indent correctly. That's annoying
* Everything should be spaces all the time. 
* Run lint on every save? -- gofmt
* comments (maybe everything?) should wrap correctly. Not split words/punct.


Spent too much time on
----------------------
* routing


tech
-----
* protobufs
* gRPC
* the various aws's
