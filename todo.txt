todo.txt


This Project
============
x get something on the frontend up that can pull the season down for it
x start putting things on redis
x create fill_in_current route function for one route
x call that route with the downloaded thing

x create new queen
x list all queens
x delete queen:: Ugh, apparently ":" in html id's mess up jquery // gotta escape them
x have  view update on del/add

* create new episode
* add events to episodes
* create new player

* queens need images, at least. Players probably too.
* create nav between different parts of main pages. 
* create the UI

* setup remote git repository
* push to heroku

* move ids to be urls, until then we use redis keys for everything. 

UI
==

VIEW:
-----
Three tabs:
* plebs  "/"
* queens  "/queens"
* episodes "/episodes"


EDIT:
-----
* add new episode
	* add/remove scoreing from episode
...
* add new queen
* add new pleb


BACKEND
=======
* get everything at once?

API
===
# right now i'm using the key for the ID which actually seems pretty wrong. Should be using ID. But I wish that I had URLs for ids for everything, would save client time for sure. maybe I should just do this. 
/seasons/:id
/seasons/:id/plebs/:id
/seasons/:id/queens/:id
/seasons/:id/queens/:id/scores/:id
/seasons/:id/episodes/:id
/seasons/:id/episodes/:id/scores/:id

/current_season/

plebs and queens actually span seasons, so maybe drop that prefix, just have them all hang
but maybe make an api that pulls down everything for a season since that should be everything. 
	* if they are independent of seasons, the plebs still have the season specific "which are my queens" thing
	* maybe this is premature optimization. There's still season specific stuff about all of them. 


DATABASE
========



TESTS I SHOULD HAVE CREATED
===========================
* post queen: starting in javascript, against a test server, verify that thing is create serverside, that 201 is returned. 
	* needs to be able to run with build && run serer && test
	* needs to reset database stuff in between, or start fresh
* I kindof like the idea of testing the api consumer and the api together, then you just aren't testing the UI

* In one test, should be able to:
	* seed database
	* run server?
	* run my javascript code, make ajax request
	* check database
	* check returns 
	* inspect request body
	* inspect response body
	* clear database

==================================================
==================================================

IN GENERAL
==========
* auto build/run server on save
* something to hit the api server with
* switch to a customized vim?
* build API niceities so that the backend is easy
* have some sort of wholistic client/server dev story

* should be creating tests all the time
	* The easier it is to create a broad test the better

* I want to be able to see the body of every request, and the text of every db query

THINGS I MISS FROM TESTBOT
* URLS everywhere
* auto errors
* API infrastructure was so good. 


EDITOR
------
* auto add ";" to end of line and create new line. 
* Pasting in code should indent correctly. That's annoying
* Everything should be spaces all the time. 
* Run lint on every save?
* comments (maybe everything?) should wrap correctly. Not split words/punct.


Spent too much time on
----------------------
* routing


tech
-----
* protobufs
* gRPC
* the various aws's